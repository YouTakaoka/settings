#include<stdio.h>
#include<opus/opus.h>
#include<stdlib.h>

int main(){
  // Encoding parameters
  opus_int32 Fs = 16000; // Sampling rate of input signal
  int sample_bytes = 16;  // Byte size of a sample
  int frame_size = 160; // Number of samples in a frame
  int channels = 1;
  int application = OPUS_APPLICATION_AUDIO;
  int frame_bytes = sample_bytes * frame_size * channels;
  
  // Open input file
  char input_file_name[] ="sample.wav";
  FILE* inp = fopen(input_file_name, "r");
  if(inp == NULL){
    printf("Error opening input file.\n");
  }

  // Open output file
  char output_file_name[] = "out.opus";
  FILE* out = fopen(output_file_name, "w");
  if(out == NULL){
    printf("Error opening output file.\n");
  }
  
  // Create opus encoder
  OpusEncoder* enc;
  int err;
  enc = opus_encoder_create(Fs, channels, application, &err);
  if(err != OPUS_OK){
    printf("Encoder creation error: %d\n", err);
    return 1;
  }

  // Encode
  opus_int16* pcm = malloc(frame_bytes); // memory for input frame data
  unsigned char* data = malloc(frame_bytes); // memory for output frame data
  while(fread(pcm, sample_bytes, frame_size, inp) > 0){
    opus_int32 len = opus_encode(enc, pcm, frame_size, data, frame_bytes);
    if(len < 0){
      printf("Encoding error: %d\n", len);
      return 1;
    }
    fwrite(data, len, 1, out);
  }

  // Free memories for data
  free(pcm);
  free(data);
  
  // Destroy opus encoder
  opus_encoder_destroy(enc);

  // Close input file
  fclose(inp);
  return 0;
}
