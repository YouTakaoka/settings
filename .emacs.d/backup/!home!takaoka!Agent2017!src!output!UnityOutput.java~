package output;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

import core.StateClass;

public class UnityOutput extends Thread{
	private Socket unitySocket;
	private PrintWriter writer;
	private BufferedReader reader;
	private static String ip = "127.0.0.1";
	private static int port = 9999;


	public UnityOutput(){
	
		try {

			unitySocket = new Socket(ip, port);
			System.out.println("クライアント起動");
			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(unitySocket.getOutputStream())));
			reader = new BufferedReader(new InputStreamReader(unitySocket.getInputStream()));

		} catch (Exception e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}

	}


	public void speak(){
		StateClass.isPlay = true;
		StateClass.QandA.setQST(System.currentTimeMillis());
		System.out.println(StateClass.question);
		System.out.flush();
		waitUnity();
		StateClass.QandA.setQET(System.currentTimeMillis());
		System.out.println("エージェント質問終了");
	}

	public void nod(){
		StateClass.isPlay = true;
		StateClass.isNod = false;
		System.out.println("Nod");
		System.out.flush();
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}
		//waitUnity();
		StateClass.isPlay = false;
	}


	public void waitUnity() {
		try {
			while (reader.readLine() == null) {
				continue;
			}
			System.out.println("waitUnity is finish");
			StateClass.isPlay = false;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void end() throws IOException{
	/*
		writer.close();
		reader.close();
		unitySocket.close();
	*/
	}
}
