#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<vpx/vpx_decoder.h>
#include "include/tools_common.h"

void save_frame(void* arg, const vpx_image_t* image);
int readUntil(FILE* fp, char* buf, char str[], const int max);
void usage_exit();

/* args: inputfile */
int main(int argc, char* argv[]){
  if(argc != 2){
    usage_exit();
  }
  
  FILE* infile = fopen(argv[1], "r");
  if(infile == NULL){
    printf("Failed to open input file.\n");
    return 1;
  }  
  
  FILE* outfile = fopen("out.bmp", "w");
  if(outfile == NULL){
    printf("Failed to open output file.\n");
    return 1;
  }
  
  const VpxInterface* decoder = get_vpx_decoder_by_name("vp8");
  vpx_codec_ctx_t codec;  // Context

  // Initialize context
  int status = vpx_codec_dec_init(&codec, decoder->codec_interface(), NULL, 0);
  if(status != VPX_CODEC_OK){
    printf("Failed to initialize context: %d\n", status);
    return 1;
  }
  
  // Read coded frame
  printf("Start reading coded frame.\n");
  uint8_t* frame = malloc(100000);  // Allocate memory for coded frame
  // int len = readUntil(stdin, &frame, "###end###", 100000);
  int len = fread(frame, 1, 100000, infile);
  printf("Frame successfully read.\n");
  fclose(infile);
  printf("Input file closed.\n");
  
  vpx_codec_iter_t iter = NULL;
  vpx_image_t* img = malloc(1000000);  // Allocate memory for raw image data
  int frame_count = 0;
  
  // Decode
  printf("Start decoding\n");
  status = vpx_codec_decode(&codec, frame, len, NULL, 0);
  free(frame);  // Free memory for coded frame
  if(status != VPX_CODEC_OK){
    printf("Failed to decode: %d\n", status);
    return 1;
  }

  printf("Get frame\n");
  while((img = vpx_codec_get_frame(&codec, &iter)) != NULL){
    vpx_img_write(img, outfile);
    frame_count++;
  }

  printf("Processed %d frames.\n", frame_count);
  
  // Destroy context
  status = vpx_codec_destroy(&codec);
  if(status != VPX_CODEC_OK){
    printf("Failed to destroy context: %d\n", status);
    return 1;
  }

  free(img);  // Free memory
  fclose(outfile);  // Close output file
  
  return 0;
}

void usage_exit(){
  printf("usage: vp8codec inputfile\n");
  exit(1);
}


/**
* Read from file pointer fp into buffer buf until string str appears
* @ret length of the string (0 if the string not found or reached to max)
*/
int readUntil(FILE* fp, char* buf, char str[], const int max){
  int l;
  char c;
  int sl = strlen(str);
  
  for(l=0; (c=getc(fp))!=EOF && l<max; l++){
    buf[l] = c;
    if(l+1 >= sl && memcmp(buf+l-sl+1, str, sl)==0){
      return l-sl+1;
    }
  }

  return 0;
}

