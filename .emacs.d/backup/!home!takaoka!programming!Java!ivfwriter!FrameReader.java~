package ivfwriter;

import java.util.*;
import java.io.*;

public class FrameReader {
    private final int sizeOfPayloadDiscriptor = 4;
    private String endstr;   // Ending string of packet
    private int maxps;  // Max payload size
    private byte[] firstPayload;
    private int sizeOfFirstPayload;
    private boolean reachedEOF;
    private int frameCount;
    
    void FrameReader(String endstr, int maxps){
        this.endstr = endstr;
        this.maxps = maxps;
        this.firstPayload = new byte[maxps];
        this.reachedEOF = false;
        this.frameCount = 0;
    }

    /**
     * Reads just one frame from the stream bis and puts it into buffer buf.
     * @param bis Binary stream from which the function reads data.
     * @param buf Buffer into which the function puts data.
     */
    public int readFrame(BufferedInputStream bis, byte[] buf) throws IOException{
        // If we have reached EOF, return -1;
        if(reachedEOF) return -1;
        
        int len = 0;
        byte[] temp = new byte[maxps];
        
        if(frameCount == 0){
            // This is the first frame, so let us read the first payload of the frame
            int l = Util.readUntil(bis, endstr, temp, maxps);
            sizeOfFirstPayload = l-sizeOfPayloadDiscriptor;
            System.arraycopy(temp, sizeOfPayloadDiscriptor, firstPayload, 0, sizeOfFirstPayload);
        }

        // Set the first payload at the beginning of frame
        System.arraycopy(firstPayload, 0, buf, 0, sizeOfFirstPayload);
        len += sizeOfFirstPayload;

        // Read packets until the s-bit becomes 1
        int l;
        while((l = Util.readUntil(bis, endstr, temp, maxps))>0 && getSbit(temp[0]) == 0){
            System.arraycopy(temp, sizeOfPayloadDiscriptor, buf, len, l-sizeOfPayloadDiscriptor);
            len += l - sizeOfPayloadDiscriptor;
        }

        if(l<0){
            // Reached EOF. Next time, this function returns -1.
            reachedEOF = true;
        }

        // Set the first payload for the next call of this function
        sizeOfFirstPayload = l - sizeOfPayloadDiscriptor;
        System.arraycopy(temp, sizeOfPayloadDiscriptor, firstPayload, 0, sizeOfFirstPayload);

        frameCount++;

        return len;
    }

    public int getSbit(byte b){
        return (b>>4) & 1;
    }
}
