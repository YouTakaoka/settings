<?php

require_once(FAST_API."lib/helpers.php");

class categorizePartsController extends PageAppController
{
    const CSVFILE_PATH = FAST_API."csv/conditions.csv";
    public static $categs = array();
        
    function __construct()
    {
        parent::__construct();

        //$categs = array("name" => cat_obj, ...)  //read from database
    }

    function get_sql_where_clause()
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 'On');
        
        //read csv file
        $records = array();
        $file = new SplFileObject(self::CSVFILE_PATH);
        $file->setFlags(SplFileObject::READ_CSV); 
        foreach ($file as $line) {
            //終端の空行を除く処理　空行の場合に取れる値は後述
            if(!is_null($line[0])){
                    $records[] = $line;
            }
        }

        //convert to object
        $rows = array();
        array_shift($records);
        foreach($records as $rec){
            $row = 
        }

        
        //initialize each condition of category to be 1


        while($row = array_shift($rows)){
            while($cond = array_shift($row->conds)){
                if(!strcmp($cond->col, "種別")){
                    if(($cat = $categs[$cond->word])->finished){
                        //append the condition of $cat
                        $row->cat->cond .= " AND ".$cat->cond->to_str();
                    } else {
                        //atomawashi
                        $row->conds[] = $cond;
                        $rows[] = $row;
                        break;
                    }
                }
                //append condition
                $row->cat->cond .= " AND ".$cond->to_str();
            }
    
            //finished?
            $fin = TRUE;
            foreach($rows as $r){
                if(!strcmp($r->cat->name, $row->cat->name))
                    $fin = FALSE;
            }
            $row->cat->finished = $fin;
        }

        
    }
}

class Row{
    public $conds = array(); //condition objects
    public $cat; //category object

    function __construct($row){
        $this->cat = categorizePartsController::$categs[array_shift($row)];
        while($col = array_shift($row)){
            $word = array_shift($row);
            $state = array_shift($row);

            $this->conds[] = new Condition($col, $word, $state);
        }
    }
}

class Condition{
    public $col;  //column string
    public $word; //string
    public $state;  //statement

    function __construct($col, $word, $state){
        $this->col = $col;
        $this->word = $word;
        $this->state = $state;
    }
    
    public function to_str(){
        $word = $this->word;
        switch($this->state){
        case "一致":
            return "$col = '$word'";
        case "一致しない":
            return "$col != '$word'";
        case "含む":
            return "$col LIKE '%$word%'";
        case "含まない":
            return "$col NOT LIKE '%$word%'";
        }
    }
}

class Category{
    public $name;
    public $cond; //string
    public $finished = false; //bool

    
}
