#include<stdio.h>
#include<opus/opus.h>
#include<stdlib.h>
#include<string.h>



struct Frame{
  unsigned int seq_number;
  unsigned char data[1024];
  int len;  // length of data
};

int main(int argc, char* argv[]){
  // Command line arguments
  char output_file_name[] = "out.opus";
  char input_file_name[20];

  if(argc != 2) {
    printf("usage: %s <input file>\n", argv[0]);
    return 1;
  }
  strcpy(input_file_name, argv[1]);

 
  // Encoding parameters
  opus_int32 Fs = 16000; // Sampling rate of input signal(Hz)
  int fd = 20;           // Frame duration(ms)
  int frame_size = fd * Fs / 1000; // Number of samples in a frame
  int sample_bytes = 2;  // Byte size of a sample
  int channels = 1;
  int application = OPUS_APPLICATION_AUDIO;
  int frame_bytes = sample_bytes * frame_size * channels;  // Note that this is for pcm data.
  const int MAX_FRAME_NUMBER = 20/fd*1000;

  char END[] = "###end###";
  
  // Open input file
  FILE* inp = fopen(input_file_name, "r");
  if(inp == NULL){
    printf("Error opening input file.\n");
    return 1;
  }

  // Open output file
  FILE* out = fopen(output_file_name, "w");
  if(out == NULL){
    printf("Error opening output file.\n");
    return 1;
  }

  // Create opus encoder
  OpusEncoder* enc;
  int err;
  enc = opus_encoder_create(Fs, channels, application, &err);
  if(err != OPUS_OK){
    printf("Encoder creation error: %d\n", err);
    return 1;
  }

  // Encode
  opus_int16* pcm = malloc(frame_bytes); // memory for input data for single frame
  char* tmp = malloc(frame_bytes);
  struct Frame frames[MAX_FRAME_NUMBER];
  unsigned int l = 0;            // Sequence number of frame

  while(fread(tmp, sample_bytes, frame_size, inp) > 0  && l < MAX_FRAME_NUMBER){
    memcpy(pcm, tmp, sample_bytes*frame_size);
    opus_int32 len = opus_encode(enc, pcm, frame_size, frames[l].data, frame_bytes);
    if(len < 0){
      printf("Encoding error: %d\n", len);
      return 1;
    }
    frames[l].seq_number = l + 1;
    frames[l].len = len;
    
    l++;
  }

  // Free memories for data
  free(pcm);
  free(tmp);

  
  // Destroy opus encoder
  opus_encoder_destroy(enc);

  
  // Write out
  for(int i=0; i<l; i++){
    struct Frame* frame = &frames[i];
    //    fwrite(&frame->seq_number, sizeof(frame->seq_number), 1, out);  // Prepend sequence number as header
    fwrite(frame->data, 1, frame->len, out);  // Write frame data
    fwrite(END, sizeof(char), strlen(END), out);  // Write ending string

    usleep(fd*1000);    
  }


  // Close input file
  fclose(inp);
  fclose(out);
  
  return 0;
}
